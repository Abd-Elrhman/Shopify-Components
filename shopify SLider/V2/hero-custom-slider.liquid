{% schema %}
{
  "name": "Hero Custom Slider",
  "settings": [],
  "blocks": [
    {
      "type": "hero_custom_slide",
      "name": "Custom Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "hero_slide_image",
          "label": "Hero Slide Background Image"
        },
        {
          "type": "image_picker",
          "id": "hero_slide_image_mobile",
          "label": "Mobile Slide Background Image (750×1000px recommended)"
        },
        {
          "type": "url",
          "id": "hero_slide_link",
          "label": "Slide Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero Custom Slider",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<style>
.custom-hero-slider {
  position: relative;
  overflow: hidden;
  width: 100%;
}

.hero-slides {
  display: flex;
  transition: transform 0.5s ease-in-out;
  will-change: transform;
}

.hero-slide {
  flex: 0 0 100%;
  position: relative;
  display: none;
  aspect-ratio: 1920 / 600;
  outline: none;
}

.hero-slide.active {
  display: block;
}

.hero-slide.swiping {
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);
}

.hero-slide:focus-within,
.hero-slide:focus {
  outline: 3px solid #E0B6AD;
}

.hero-slide-link {
  display: block;
  width: 100%;
  height: 100%;
}

.responsive-slide {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Remove arrows */
button.prev-slide,
button.next-slide {
  display: none !important;
}

.slider-dots {
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  z-index: 2;
}
.slider-dot {
  width: 48px;
  height: 48px;
  background: transparent;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  position: relative;
}

.slider-dot::before {
  content: "";
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: #9E97C3;
  display: block;
}

.slider-dot.active::before {
  background-color: #E0B6AD;
}

@media only screen and (max-width: 767px) {
  .slider-dots {
    bottom: 0px;
  }
  .slider-dot {
    width: 44px;
    height: 44px;
  }

  .slider-dot::before {
    width: 10px;
    height: 10px;
  }

  .slider-dots {
    gap: 12px;
  }

  .hero-slide {
    aspect-ratio: 3 / 4; /* Matches 750×1000px */
    min-height: 500px;
  }
}
</style>

<div class="custom-hero-slider" role="region" aria-label="Hero Image Slider">
  <div class="hero-slides" tabindex="0">
    {% for block in section.blocks %}
      <div class="hero-slide" role="group" aria-roledescription="slide" aria-label="Slide {{ forloop.index }}" tabindex="0">
        {% if block.settings.hero_slide_link %}<a href="{{ block.settings.hero_slide_link }}" class="hero-slide-link">{% endif %}

        {% assign desktop_img = block.settings.hero_slide_image | img_url: '1920x600' %}
        {% assign mobile_img = block.settings.hero_slide_image_mobile | img_url: '750x1000' %}

        <picture>
          {% if block.settings.hero_slide_image_mobile %}
            <source media="(max-width: 767px)" srcset="{{ mobile_img }}">
          {% endif %}
          <img
            class="responsive-slide"
            src="{{ desktop_img }}"
            width="1920" height="600"
            {% if forloop.first %}loading="eager" fetchpriority="high"{% else %}loading="lazy"{% endif %}
            alt="Slide {{ forloop.index }}"
          >
        </picture>

        {% if block.settings.hero_slide_link %}</a>{% endif %}
      </div>
    {% endfor %}
  </div>
  <div class="slider-dots" role="tablist" aria-label="Slide navigation"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const slides = document.querySelectorAll('.hero-slide');
  const dotsContainer = document.querySelector('.slider-dots');
  let currentIndex = 0;
  const slideInterval = 5000;
  let startX = 0;
  let isDragging = false;

  function createDots() {
    slides.forEach((_, index) => {
      const dot = document.createElement('button');
      dot.classList.add('slider-dot');
      dot.setAttribute('role', 'tab');
      dot.setAttribute('aria-label', `Go to slide ${index + 1}`);
      dot.dataset.index = index;
      dotsContainer.appendChild(dot);

      dot.addEventListener('click', function () {
        currentIndex = parseInt(this.dataset.index);
        showSlide(currentIndex);
      });
    });
  }

  function updateDots() {
    const dots = dotsContainer.querySelectorAll('.slider-dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
      dot.setAttribute('aria-selected', index === currentIndex);
    });
  }

  function showSlide(index) {
    slides.forEach((slide, i) => {
      slide.classList.toggle('active', i === index);
    });
    updateDots();
  }

  function nextSlide() {
    currentIndex = (currentIndex + 1) % slides.length;
    showSlide(currentIndex);
  }

  function prevSlide() {
    currentIndex = (currentIndex - 1 + slides.length) % slides.length;
    showSlide(currentIndex);
  }

  const sliderEl = document.querySelector('.hero-slides');

  sliderEl.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    slides[currentIndex].classList.add('swiping');
  });

  sliderEl.addEventListener('touchend', (e) => {
    let endX = e.changedTouches[0].clientX;
    handleSwipe(endX);
  });

  sliderEl.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.clientX;
    slides[currentIndex].classList.add('swiping');
  });

  sliderEl.addEventListener('mouseup', (e) => {
    if (!isDragging) return;
    isDragging = false;
    handleSwipe(e.clientX);
    slides[currentIndex].classList.remove('swiping');
  });

  function handleSwipe(endX) {
    let diffX = endX - startX;
    if (diffX > 50) prevSlide();
    if (diffX < -50) nextSlide();
  }

  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') nextSlide();
    if (e.key === 'ArrowLeft') prevSlide();
  });

  showSlide(currentIndex);
  createDots();
  setInterval(nextSlide, slideInterval);
});
</script>